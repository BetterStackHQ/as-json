/// <reference path="./index.d.ts" />
import { serializeString } from "./serialize/string";
import { serializeBool } from "./serialize/bool";
import { serializeInteger } from "./serialize/integer";
import { serializeFloat } from "./serialize/float";
import { serializeObject } from "./serialize/object";
import { serializeDate } from "./serialize/date";
import { serializeArray } from "./serialize/array";
import { serializeMap } from "./serialize/map";
import { deserializeBoolean } from "./deserialize/bool";
import { deserializeArray } from "./deserialize/array";
import { deserializeFloat } from "./deserialize/float";
import { deserializeObject } from "./deserialize/object";
import { deserializeMap } from "./deserialize/map";
import { deserializeDate } from "./deserialize/date";
import { NULL_WORD } from "./custom/chars";
import { deserializeInteger } from "./deserialize/integer";
import { deserializeString } from "./deserialize/string";

/**
 * JSON Encoder/Decoder for AssemblyScript
 */
export namespace JSON {
  export class Box<T> {
    constructor(public value: T) {}
    @inline static from<T>(value: T): Box<T> {
      return new Box(value);
    }
  }
  
  /**
   * Stringifies valid JSON data.
   * ```js
   * JSON.stringify<T>(data)
   * ```
   * @param data T
   * @returns string
   */
  // @ts-ignore: Decorator
  export function stringify<T>(data: T): string {
    if (isBoolean<T>()) {
      return serializeBool(data as bool);
    } else if (isInteger<T>()) {
      // @ts-ignore
      return serializeInteger<T>(data);
    } else if (isFloat<T>(data)) {
      // @ts-ignore
      return serializeFloat<T>(data);
      // @ts-ignore: Function is generated by transform
    } else if (isNullable<T>() && changetype<usize>(data) == <usize>0) {
      return NULL_WORD;
      // @ts-ignore
    } else if (isString<nonnull<T>>()) {
      return serializeString(changetype<string>(data));
      // @ts-ignore: Supplied by trasnform
    } else if (isDefined(data.__SERIALIZE)) {
      // @ts-ignore
      return serializeObject(changetype<nonnull<T>>(data));
    } else if (data instanceof Date) {
      // @ts-ignore
      return serializeDate(changetype<nonnull<T>>(data));
    } else if (data instanceof Array) {
      // @ts-ignore
      return serializeArray(changetype<nonnull<T>>(data));
    } else if (data instanceof Map) {
      // @ts-ignore
      return serializeMap(changetype<nonnull<T>>(data));
    } else {
      throw new Error(
        `Could not serialize data of type ${nameof<T>()}. Make sure to add the correct decorators to classes.`
      );
    }
  }
  /**
   * Parses valid JSON strings into their original format.
   * ```js
   * JSON.parse<T>(data)
   * ```
   * @param data string
   * @returns T
   */

  // @ts-ignore: Decorator
  export function parse<T>(data: string): T {
    if (isBoolean<T>()) {
      return deserializeBoolean(data) as T;
    } else if (isInteger<T>()) {
      return deserializeInteger<T>(data);
    } else if (isFloat<T>()) {
      return deserializeFloat<T>(data);
    } else if (isNullable<T>() && data.length === 4 && data == "null") {
      // @ts-ignore
      return null;
    } else if (isString<T>()) {
      // @ts-ignore
      return deserializeString(data);
    } else if (isArray<T>()) {
      // @ts-ignore
      return deserializeArray<nonnull<T>>(data);
    }
    let type: nonnull<T> = changetype<nonnull<T>>(0);
    // @ts-ignore: Defined by trasnform
    if (isDefined(type.__DESERIALIZE)) {
      // @ts-ignore
      return deserializeObject<nonnull<T>>(data.trimStart());
    } else if (type instanceof Map) {
      // @ts-ignore
      return deserializeMap<nonnull<T>>(data.trimStart());
    } else if (type instanceof Date) {
      // @ts-ignore
      return deserializeDate(data);
    } else {
      throw new Error(
        `Could not deserialize data ${data} to type ${nameof<T>()}. Make sure to add the correct decorators to classes.`
      );
    }
  }
}

// This allows JSON.stringify and JSON.parse to be available globally through an alias
// @ts-ignore: Decorator
@global function __SERIALIZE<T>(data: T): string {
  return JSON.stringify(data);
}
// @ts-ignore: Decorator
@global function __DESERIALIZE<T>(data: string): T {
  return JSON.parse<T>(data);
}